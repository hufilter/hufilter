name: Deploy

env:
  COMMIT_AUTHOR_NAME: hufilterbot
  COMMIT_AUTHOR_EMAIL: hufilter@protonmail.com
  COMMIT_MESSAGE: Automatic deploy from $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/commit/$GITHUB_SHA

on:
  push:
    branches:
      - master
    paths:
      - assets/scripts/*.js
      - filters.json
      - sections/**.txt
      - sections/headers/**.txt
      - .github/workflows/deploy.yml
  workflow_dispatch:

# Make sure that only one deploy job runs at a time. For example, if we merge
# a pull request, then GitHub will call this workflow, but if we merge another
# pull request while the first deploy job is still running, then GitHub will
# call this workflow again, and we will have two deploy jobs running at the
# same time. This can cause conflicts, so we need to make sure that only one
# deploy job runs at a time.
concurrency:
  group: deploy
  cancel-in-progress: true

jobs:
  build:
    name: Build filter lists
    # Run this job only in the original source repository, not in forks
    if: github.repository == 'hufilter/hufilter'
    runs-on: ubuntu-latest
    steps:
      - name: Check out to repository
        uses: actions/checkout@v5
        with:
          ref: master

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: package.json
          cache: pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Create dist directory
        run: mkdir dist

      - name: Run build script
        run: pnpm build

      - name: Upload build artifact
        uses: actions/upload-artifact@v5
        with:
          name: build_artifact
          path: dist/**

  deploy:
    name: Deploy filter lists to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout to gh-pages branch
        uses: actions/checkout@v5
        with:
          path: hufilter-gh-pages
          ref: gh-pages
          persist-credentials: false
          fetch-depth: 0

      - name: Download build artifact
        uses: actions/download-artifact@v5
        with:
          name: build_artifact
          path: ./dist

      # We always build every filter list, but in some cases it means that only
      # the metadata fields (version, last modified, checksum) will be updated,
      # and the actual filter list content will be the same. So we need to check
      # if the filter list content has changed, and only then commit the changes
      # to the target repository in order to avoid unnecessary commits.
      - name: Copy updated filter lists
        run: |
          # Iterate through the filter list names from the build artifact
          # Filter lists always prefixed with "hufilter" and have ".txt" extension
          FILTERS=$(find ./dist -type f -name "hufilter*.txt" -printf "%f\n")
          for FILTER in $FILTERS
          do
              # Check if the file exists in the target repository
              if [ -f "./hufilter-gh-pages/$FILTER" ]
              then
                  # Check if the files are different (but ignore metadata fields that change on every build)
                  IGNORE_PATTERN="^[!#]\s\?\(Version\|Last modified\|Checksum\):"
                  if [ ! -z "$(diff <(sed -e "/$IGNORE_PATTERN/d" ./dist/$FILTER) <(sed -e "/$IGNORE_PATTERN/d" ./hufilter-gh-pages/$FILTER))" ]
                  then
                      # If the files are different, copy the file from the build artifact to the target repository
                      # (this will overwrite the existing file)
                      cp ./dist/$FILTER ./hufilter-gh-pages/$FILTER
                      echo "Updated $FILTER"
                  fi
              else
                  # Just copy new filter lists to the target repository
                  cp ./dist/$FILTER ./hufilter-gh-pages/$FILTER
                  echo "Added $FILTER"
              fi
          done

      # We need to remove filter lists that were removed from the build artifact
      # (for example, if we removed a filter list from the source repository's
      # filters.json file, then it won't be included in the build artifact, so
      # we need to remove it from the target repository as well)
      - name: Remove cancelled filter lists
        run: |
          # Iterate through the filter list names from the target repository
          # Filter lists always prefixed with "hufilter" and have ".txt" extension
          FILTERS=$(find ./hufilter-gh-pages -type f -name "hufilter*.txt" -printf "%f\n")
          COUNT=0
          for FILTER in $FILTERS
          do
              # Check if the file exists in the build artifact
              if [ ! -f "./dist/$FILTER" ]
              then
                  # If the file doesn't exist in the build artifact, remove it from the target repository
                  rm ./hufilter-gh-pages/$FILTER

                  # Notify if a filter list was removed by displaying its name
                  echo "Removed $FILTER"

                  COUNT=$((COUNT+1))
              fi
          done
          
          # Notify about the total number of removed filter lists
          if [ $COUNT -eq 0 ]
          then
              echo "No filter lists were removed."
          else
              echo "Removed $COUNT filter lists."
          fi

      # We need to check if there are any changes for filter lists at all.
      # If there are no changes, then we don't need to commit anything.
      - name: Check for filter list changes in hufilter/hufilter
        run: |
          cd ./hufilter-gh-pages

          # Check if there are any changes for hufilter*.txt files
          if [ -z "$(git status --porcelain hufilter*.txt)" ]
          then
              echo "It seems that there are no changes for filter lists at all."
              
              # Set a flag to skip the next steps
              echo "NO_FILTER_LIST_CHANGES=true" >> $GITHUB_ENV
          else
              echo "There are some changes for filter lists, so we need to commit them."
          fi

      - name: Generate file index for filter lists
        if: env.NO_FILTER_LIST_CHANGES != 'true'
        uses: actions/github-script@v8
        with:
          script: |
            const { readdir, stat, writeFile } = require('fs').promises;
            const { join } = require('path');

            const WORKING_DIR = './hufilter-gh-pages';
            const TITLE = 'Index of filter lists';
            const HTML_TEMPLATE = `<!DOCTYPE html>
            <html>
                <head>
                    <title>${TITLE}</title>
                </head>
                <body>
                    <h1>${TITLE}</h1>
                    <table>
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Size</th>
                            </tr>
                        </thead>
                        <tbody>
                            {{TABLE_ROWS}}
                        </tbody>
                    </table>
                </body>
            </html>`;

            ;(async () => {
                const files = await readdir(WORKING_DIR);
                const txtFiles = files.filter((file) => file.endsWith('.txt'));

                const listItems = txtFiles.map(async (file) => {
                    const { size } = await stat(join(WORKING_DIR, file));
                    const sizeInKb = (size / 1024).toFixed(2);

                    return `<tr><td><a href="${file}">${file}</a></td><td>${sizeInKb} kB</td></tr>`;
                });

                const list = await Promise.all(listItems);
                const html = HTML_TEMPLATE.replace('{{TABLE_ROWS}}', list.join(''));

                await writeFile(join(WORKING_DIR, 'index.html'), html);
            })();

      - name: Commit filter list changes
        if: env.NO_FILTER_LIST_CHANGES != 'true'
        run: |
          cd ./hufilter-gh-pages

          echo "Configuring git..."
          git config --local user.email ${{ env.COMMIT_AUTHOR_EMAIL }}
          git config --local user.name ${{ env.COMMIT_AUTHOR_NAME }}

          echo "Adding updated filter lists..."
          git add -f hufilter*.txt

          echo "Adding index file..."
          git add -f index.html

          echo "Committing changes..."
          git commit -a -m "${{ env.COMMIT_MESSAGE }}"

      - name: Push filter list changes for hufilter/hufilter
        if: env.NO_FILTER_LIST_CHANGES != 'true'
        uses: ad-m/github-push-action@master
        with:
          directory: ./hufilter-gh-pages
          github_token: ${{ secrets.API_TOKEN_GITHUB }}
          branch: gh-pages
          force: true

  purge:
    name: Purge jsDelivr cache
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout to gh-pages branch
        uses: actions/checkout@v5
        with:
          path: hufilter-gh-pages
          ref: gh-pages
          persist-credentials: false
          # Fetch only the last two commits to compare changes
          fetch-depth: 2

      - name: Get changed filter lists
        uses: actions/github-script@v8
        with:
          script: |
            const { data: commits } = await github.rest.repos.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 2,
                sha: 'gh-pages',
            });

            if (commits.length < 2) {
                core.setFailed('Not enough commits to compare');
                return;
            }

            const base = commits[1].sha; // Previous commit SHA
            const head = commits[0].sha; // Latest commit SHA

            const { data: diff } = await github.rest.repos.compareCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base,
                head,
            });

            core.info(`Comparing ${base.slice(0, 7)}...${head.slice(0, 7)}`);

            const changedFiles = diff.files
                .filter(
                    (file) =>
                        file.filename.startsWith('hufilter') &&
                        file.filename.endsWith('.txt'),
                )
                .map((file) => file.filename);

            // Set the list of changed filter lists to the environment variable
            core.exportVariable('CHANGED_FILTER_LISTS', JSON.stringify(changedFiles));
            core.info(
                `Changed filter lists need to be purged: ${JSON.stringify(changedFiles)}`,
            );

      - name: Purge jsDelivr cache
        if: env.CHANGED_FILTER_LISTS != '[]'
        uses: actions/github-script@v8
        with:
          script: |
            const changedFilterLists = JSON.parse(process.env.CHANGED_FILTER_LISTS);
            const pathsToPurge = changedFilterLists.map((file) => `/gh/hufilter/hufilter@gh-pages/${file}`);

            const commonRequestOptions = {
                headers: {
                    'Content-Type': 'application/json',
                    'cache-control': 'no-cache',
                    'user-agent': 'jsdelivr-purge',
                },
            };

            // Step 1: Send a purge request to jsDelivr
            core.startGroup('Sending purge request to jsDelivr');
            const purgeRequest = await fetch('https://purge.jsdelivr.net/', {
                ...commonRequestOptions,
                method: 'POST',
                body: JSON.stringify({
                    path: pathsToPurge,
                }),
            });

            const purgeResponse = await purgeRequest.json();

            const { id } = purgeResponse;

            if (!id) {
                core.setFailed('Purge request failed, no ID returned');
                return;
            }
            core.endGroup();

            // Step 2: Poll the status of the purge request until it's pending
            core.startGroup('Polling the status of the purge request');
            let { status } = purgeResponse;
            let attempts = 0;

            while (status === 'pending' && attempts < 10) {
                await new Promise((resolve) => setTimeout(resolve, 2500));

                const statusRequest = await fetch(
                    `https://purge.jsdelivr.net/status/${id}`,
                    commonRequestOptions,
                );
                const statusResponse = await statusRequest.json();

                status = statusResponse.status;

                attempts++;
            }

            if (status !== 'finished') {
                core.setFailed(`Error: Purge request failed with status: ${status} after ${attempts} attempt(s)`);
                process.exit(1);
            } else {
                core.info('Purge request finished successfully');
            }
            core.endGroup();
